"""adding_person_and_related_tables

Revision ID: a3e751dff3e2
Revises: b7bf14b5c68d
Create Date: 2025-10-08 03:26:45.060721
"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "a3e751dff3e2"
down_revision = "b7bf14b5c68d"
branch_labels = None
depends_on = None


def _drop_users_pk_if_any():
    """Drop existing primary key on users (if any), robustly."""
    conn = op.get_bind()
    # Find PK constraint name (Postgres)
    pk_name = conn.execute(
        sa.text(
            """
            SELECT con.conname
            FROM pg_constraint con
            JOIN pg_class rel ON rel.oid = con.conrelid
            JOIN pg_namespace nsp ON nsp.oid = rel.relnamespace
            WHERE nsp.nspname = current_schema()
              AND rel.relname = 'users'
              AND con.contype = 'p'
            """
        )
    ).scalar()
    if pk_name:
        op.drop_constraint(pk_name, "users", type_="primary")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # ----------------------------
    # Version tables (email/person/xref)
    # ----------------------------
    op.create_table(
        "email_version",
        sa.Column("email_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("person_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("email_address", sa.String(), autoincrement=False, nullable=True),
        sa.Column(
            "date_invalidated",
            sa.DateTime(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("date_created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("date_updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("transaction_id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.Column(
            "person_id_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "email_address_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_invalidated_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_created_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_updated_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "created_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "updated_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("email_id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_email_version_date_created"),
        "email_version",
        ["date_created"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_version_date_updated"),
        "email_version",
        ["date_updated"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_version_end_transaction_id"),
        "email_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_version_operation_type"),
        "email_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_version_person_id"),
        "email_version",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_version_transaction_id"),
        "email_version",
        ["transaction_id"],
        unique=False,
    )

    op.create_table(
        "person",
        sa.Column("person_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("curie", sa.String(), nullable=True),
        sa.Column("okta_id", sa.String(), nullable=True),
        sa.Column("mod_roles", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("date_created", sa.DateTime(), nullable=False),
        sa.Column("date_updated", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("updated_by", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"]),
        sa.ForeignKeyConstraint(["updated_by"], ["users.id"]),
        sa.PrimaryKeyConstraint("person_id"),
        sa.UniqueConstraint("okta_id", name="uq_person_okta_id"),
    )
    op.create_index(op.f("ix_person_curie"), "person", ["curie"], unique=False)
    op.create_index(
        op.f("ix_person_date_created"), "person", ["date_created"], unique=False
    )
    op.create_index(
        op.f("ix_person_date_updated"), "person", ["date_updated"], unique=False
    )
    op.create_index(
        "ix_person_display_name_trigram", "person", ["display_name"], unique=False
    )
    op.create_index(op.f("ix_person_okta_id"), "person", ["okta_id"], unique=False)

    op.create_table(
        "person_cross_reference_version",
        sa.Column(
            "person_cross_reference_id",
            sa.Integer(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("curie", sa.String(), autoincrement=False, nullable=True),
        sa.Column("curie_prefix", sa.String(), autoincrement=False, nullable=True),
        sa.Column("person_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("pages", sa.ARRAY(sa.String()), autoincrement=False, nullable=True),
        sa.Column(
            "is_obsolete",
            sa.Boolean(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("date_created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("date_updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("transaction_id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.Column("curie_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column(
            "curie_prefix_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "person_id_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("pages_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column(
            "is_obsolete_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_created_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_updated_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "created_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "updated_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("person_cross_reference_id", "transaction_id"),
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_curie"),
        "person_cross_reference_version",
        ["curie"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_curie_prefix"),
        "person_cross_reference_version",
        ["curie_prefix"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_date_created"),
        "person_cross_reference_version",
        ["date_created"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_date_updated"),
        "person_cross_reference_version",
        ["date_updated"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_end_transaction_id"),
        "person_cross_reference_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_operation_type"),
        "person_cross_reference_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_person_id"),
        "person_cross_reference_version",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_version_transaction_id"),
        "person_cross_reference_version",
        ["transaction_id"],
        unique=False,
    )

    op.create_table(
        "person_version",
        sa.Column("person_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("display_name", sa.String(), autoincrement=False, nullable=True),
        sa.Column("curie", sa.String(), autoincrement=False, nullable=True),
        sa.Column("okta_id", sa.String(), autoincrement=False, nullable=True),
        sa.Column("mod_roles", sa.ARRAY(sa.String()), autoincrement=False, nullable=True),
        sa.Column("date_created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("date_updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.String(), autoincrement=False, nullable=True),
        sa.Column("transaction_id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.Column(
            "display_name_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("curie_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("okta_id_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column(
            "mod_roles_mod", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "date_created_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "date_updated_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "created_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "updated_by_mod",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("person_id", "transaction_id"),
    )
    op.create_index(op.f("ix_person_version_curie"), "person_version", ["curie"], unique=False)
    op.create_index(
        op.f("ix_person_version_date_created"),
        "person_version",
        ["date_created"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_version_date_updated"),
        "person_version",
        ["date_updated"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_version_end_transaction_id"),
        "person_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_version_okta_id"), "person_version", ["okta_id"], unique=False
    )
    op.create_index(
        op.f("ix_person_version_operation_type"),
        "person_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_version_transaction_id"),
        "person_version",
        ["transaction_id"],
        unique=False,
    )

    op.create_table(
        "email",
        sa.Column("email_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("person_id", sa.Integer(), nullable=False),
        sa.Column("email_address", sa.String(), nullable=False),
        sa.Column("date_invalidated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("date_created", sa.DateTime(), nullable=False),
        sa.Column("date_updated", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("updated_by", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"]),
        sa.ForeignKeyConstraint(["person_id"], ["person.person_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["updated_by"], ["users.id"]),
        sa.PrimaryKeyConstraint("email_id"),
        sa.UniqueConstraint("person_id", "email_address", name="uq_email_person_address"),
    )
    op.create_index("ix_email_address", "email", ["email_address"], unique=False)
    op.create_index(op.f("ix_email_date_created"), "email", ["date_created"], unique=False)
    op.create_index(op.f("ix_email_date_updated"), "email", ["date_updated"], unique=False)
    op.create_index(op.f("ix_email_person_id"), "email", ["person_id"], unique=False)

    op.create_table(
        "person_cross_reference",
        sa.Column(
            "person_cross_reference_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("curie", sa.String(), nullable=False),
        sa.Column("curie_prefix", sa.String(), nullable=False),
        sa.Column("person_id", sa.Integer(), nullable=True),
        sa.Column("pages", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("is_obsolete", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("date_created", sa.DateTime(), nullable=False),
        sa.Column("date_updated", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(), nullable=True),
        sa.Column("updated_by", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["users.id"]),
        sa.ForeignKeyConstraint(["person_id"], ["person.person_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["updated_by"], ["users.id"]),
        sa.PrimaryKeyConstraint("person_cross_reference_id"),
        sa.UniqueConstraint("curie", name="uq_person_xref_curie"),
        sa.UniqueConstraint("person_id", "curie_prefix", name="uq_person_xref_person_prefix"),
    )
    op.create_index(
        op.f("ix_person_cross_reference_curie"), "person_cross_reference", ["curie"], unique=False
    )
    op.create_index(
        op.f("ix_person_cross_reference_curie_prefix"),
        "person_cross_reference",
        ["curie_prefix"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_date_created"),
        "person_cross_reference",
        ["date_created"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_date_updated"),
        "person_cross_reference",
        ["date_updated"],
        unique=False,
    )
    op.create_index(
        op.f("ix_person_cross_reference_person_id"),
        "person_cross_reference",
        ["person_id"],
        unique=False,
    )
    op.create_index("ix_person_xref_person_id", "person_cross_reference", ["person_id"], unique=False)
    op.create_index(
        "ix_person_xref_prefix_curie",
        "person_cross_reference",
        ["curie_prefix", "curie"],
        unique=False,
    )

    # ----------------------------
    # USERS table adjustments (data-safe)
    # ----------------------------

    # 1) Add user_id as identity (keeps existing id/email data untouched)
    # If the column might already exist (rerun/partial), guard it.
    conn = op.get_bind()
    exists = conn.execute(
        sa.text(
            """
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users'
              AND column_name = 'user_id'
            """
        )
    ).fetchone()
    if not exists:
        op.execute(
            'ALTER TABLE "users" ADD COLUMN "user_id" INTEGER GENERATED BY DEFAULT AS IDENTITY'
        )
    # Ensure NOT NULL (backfilled by identity for new rows; existing rows get values automatically in PG15+;
    # if your PG version doesn't backfill existing rows, force-fill here)
    op.execute(
        """
        UPDATE "users"
        SET user_id = COALESCE(user_id, nextval(pg_get_serial_sequence('"users"', 'user_id')))
        """
    )
    op.alter_column("users", "user_id", nullable=False)

    # 2) Make user_id the primary key (drop old PK if any)
    _drop_users_pk_if_any()
    op.create_primary_key("pk_users_user_id", "users", ["user_id"])

    # 3) Add/keep other columns & indexes exactly as needed (does NOT touch existing id/email values)
    #    (automation_username, person_id, etc.)
    # Add columns if missing (guarded to be idempotent)
    # automation_username
    exists = conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users' AND column_name = 'automation_username'
            """
        )
    ).fetchone()
    if not exists:
        op.add_column("users", sa.Column("automation_username", sa.String(), nullable=True))
    # person_id
    exists = conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users' AND column_name = 'person_id'
            """
        )
    ).fetchone()
    if not exists:
        op.add_column("users", sa.Column("person_id", sa.Integer(), nullable=True))

    # id (legacy) must remain nullable TRUE, keep data
    op.alter_column("users", "id", existing_type=sa.VARCHAR(), nullable=True)

    # (Re)create indexes (safe even if pre-existing in many PGs; Alembic will track)
    # Drop old non-unique ix_users_id if present, then recreate as unique
    try:
        op.drop_index("ix_users_id", table_name="users")
    except Exception:
        pass
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=True)

    # Ensure indexes on automation_username, email, person_id
    op.create_index(op.f("ix_users_automation_username"), "users", ["automation_username"], unique=False)
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=False)
    op.create_index(op.f("ix_users_person_id"), "users", ["person_id"], unique=False)

    # 4) FK users.person_id -> person (SET NULL on delete)
    # Drop existing FK if any, then add
    try:
        op.drop_constraint("users_person_id_fkey", "users", type_="foreignkey")
    except Exception:
        pass
    op.create_foreign_key(
        None, "users", "person", ["person_id"], ["person_id"], ondelete="SET NULL"
    )

    # 5) Add the CHECK constraint matching the model
    try:
        op.create_check_constraint(
            "ck_users_exactly_one_of_person_or_automation",
            "users",
            "(person_id IS NULL) <> (automation_username IS NULL)",
        )
    except Exception:
        # if it existed already, ignore
        pass

    # ----------------------------
    # TRANSACTION.user_id migration (VARCHAR -> INTEGER FK)
    # ----------------------------

    # a) Stage new int column
    if not conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'transaction' AND column_name = 'user_id_new'
            """
        )
    ).fetchone():
        op.add_column("transaction", sa.Column("user_id_new", sa.Integer(), nullable=True))

    # b) Copy values from legacy string user_id (transaction.user_id -> users.id -> users.user_id)
    #    Keep rows where a matching users.id exists; rows without a match become NULL (preserves data semantics).
    op.execute(
        """
        UPDATE transaction t
        SET user_id_new = u.user_id
        FROM users u
        WHERE t.user_id IS NOT NULL
          AND u.id = t.user_id
        """
    )

    # c) Drop old FK (if it exists) and replace column
    try:
        op.drop_constraint("transaction_user_id_fkey", "transaction", type_="foreignkey")
    except Exception:
        pass
    # Drop old varchar user_id column, rename staged column to user_id
    op.drop_column("transaction", "user_id")
    op.alter_column("transaction", "user_id_new", new_column_name="user_id")

    # d) Add new FK to users.user_id (integer)
    op.create_foreign_key(None, "transaction", "users", ["user_id"], ["user_id"])

    # ----------------------------
    # users_version adjustments (store new fields + mods)
    # ----------------------------
    if not conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users_version' AND column_name = 'user_id'
            """
        )
    ).fetchone():
        op.add_column("users_version", sa.Column("user_id", sa.Integer(), autoincrement=False, nullable=False))
    if not conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users_version' AND column_name = 'automation_username'
            """
        )
    ).fetchone():
        op.add_column("users_version", sa.Column("automation_username", sa.String(), autoincrement=False, nullable=True))
    if not conn.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_schema = current_schema()
              AND table_name = 'users_version' AND column_name = 'person_id'
            """
        )
    ).fetchone():
        op.add_column("users_version", sa.Column("person_id", sa.Integer(), autoincrement=False, nullable=True))

    # mod flags (id_mod, automation_username_mod, person_id_mod)
    for col in ("id_mod", "automation_username_mod", "person_id_mod"):
        if not conn.execute(
            sa.text(
                f"""
                SELECT 1 FROM information_schema.columns
                WHERE table_schema = current_schema()
                  AND table_name = 'users_version' AND column_name = '{col}'
                """
            )
        ).fetchone():
            op.add_column(
                "users_version",
                sa.Column(col, sa.Boolean(), server_default=sa.text("false"), nullable=False),
            )

    # keep legacy id nullable=True on version table
    op.alter_column("users_version", "id", existing_type=sa.VARCHAR(), nullable=True, autoincrement=False)

    # helpful indexes
    op.create_index(
        op.f("ix_users_version_automation_username"),
        "users_version",
        ["automation_username"],
        unique=False,
    )
    op.create_index(op.f("ix_users_version_email"), "users_version", ["email"], unique=False)
    op.create_index(op.f("ix_users_version_person_id"), "users_version", ["person_id"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # users_version: drop added indexes/cols
    op.drop_index(op.f("ix_users_version_person_id"), table_name="users_version")
    op.drop_index(op.f("ix_users_version_email"), table_name="users_version")
    op.drop_index(op.f("ix_users_version_automation_username"), table_name="users_version")
    op.alter_column("users_version", "id", existing_type=sa.VARCHAR(), nullable=False, autoincrement=False)
    op.drop_column("users_version", "person_id_mod")
    op.drop_column("users_version", "automation_username_mod")
    op.drop_column("users_version", "id_mod")
    op.drop_column("users_version", "person_id")
    op.drop_column("users_version", "automation_username")
    op.drop_column("users_version", "user_id")

    # transaction: revert FK to users.id (varchar)
    # drop FK to users.user_id
    try:
        op.drop_constraint(None, "transaction", type_="foreignkey")
    except Exception:
        pass
    # add back varchar user_id and copy from int via join
    op.add_column("transaction", sa.Column("user_id_old", sa.VARCHAR(), nullable=True))
    op.execute(
        """
        UPDATE transaction t
        SET user_id_old = u.id
        FROM users u
        WHERE t.user_id IS NOT NULL
          AND u.user_id = t.user_id
        """
    )
    op.drop_column("transaction", "user_id")
    op.alter_column("transaction", "user_id_old", new_column_name="user_id", nullable=True)
    op.create_foreign_key("transaction_user_id_fkey", "transaction", "users", ["user_id"], ["id"])

    # users: drop check constraint, FK to person, and indexes we added
    try:
        op.drop_constraint("ck_users_exactly_one_of_person_or_automation", "users", type_="check")
    except Exception:
        pass
    try:
        op.drop_constraint(None, "users", type_="foreignkey")
    except Exception:
        pass
    op.drop_index(op.f("ix_users_person_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_automation_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.alter_column("users", "id", existing_type=sa.VARCHAR(), nullable=False)

    # users: drop PK on user_id and remove column
    try:
        op.drop_constraint("pk_users_user_id", "users", type_="primary")
    except Exception:
        pass
    op.drop_column("users", "person_id")
    op.drop_column("users", "automation_username")
    op.drop_column("users", "user_id")

    # person_cross_reference
    op.drop_index("ix_person_xref_prefix_curie", table_name="person_cross_reference")
    op.drop_index("ix_person_xref_person_id", table_name="person_cross_reference")
    op.drop_index(op.f("ix_person_cross_reference_person_id"), table_name="person_cross_reference")
    op.drop_index(op.f("ix_person_cross_reference_date_updated"), table_name="person_cross_reference")
    op.drop_index(op.f("ix_person_cross_reference_date_created"), table_name="person_cross_reference")
    op.drop_index(op.f("ix_person_cross_reference_curie_prefix"), table_name="person_cross_reference")
    op.drop_index(op.f("ix_person_cross_reference_curie"), table_name="person_cross_reference")
    op.drop_table("person_cross_reference")

    # email
    op.drop_index(op.f("ix_email_person_id"), table_name="email")
    op.drop_index(op.f("ix_email_date_updated"), table_name="email")
    op.drop_index(op.f("ix_email_date_created"), table_name="email")
    op.drop_index("ix_email_address", table_name="email")
    op.drop_table("email")

    # person_version
    op.drop_index(op.f("ix_person_version_transaction_id"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_operation_type"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_okta_id"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_end_transaction_id"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_date_updated"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_date_created"), table_name="person_version")
    op.drop_index(op.f("ix_person_version_curie"), table_name="person_version")
    op.drop_table("person_version")

    # person_cross_reference_version
    op.drop_index(op.f("ix_person_cross_reference_version_transaction_id"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_person_id"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_operation_type"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_end_transaction_id"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_date_updated"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_date_created"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_curie_prefix"), table_name="person_cross_reference_version")
    op.drop_index(op.f("ix_person_cross_reference_version_curie"), table_name="person_cross_reference_version")
    op.drop_table("person_cross_reference_version")

    # person
    op.drop_index(op.f("ix_person_okta_id"), table_name="person")
    op.drop_index("ix_person_display_name_trigram", table_name="person")
    op.drop_index(op.f("ix_person_date_updated"), table_name="person")
    op.drop_index(op.f("ix_person_date_created"), table_name="person")
    op.drop_index(op.f("ix_person_curie"), table_name="person")
    op.drop_table("person")

    # email_version
    op.drop_index(op.f("ix_email_version_transaction_id"), table_name="email_version")
    op.drop_index(op.f("ix_email_version_person_id"), table_name="email_version")
    op.drop_index(op.f("ix_email_version_operation_type"), table_name="email_version")
    op.drop_index(op.f("ix_email_version_end_transaction_id"), table_name="email_version")
    op.drop_index(op.f("ix_email_version_date_updated"), table_name="email_version")
    op.drop_index(op.f("ix_email_version_date_created"), table_name="email_version")
    op.drop_table("email_version")
    # ### end Alembic commands ###
