"""citation_add

Revision ID: 1c2b381890c7
Revises: 4c2127d5c55f
Create Date: 2023-03-21 20:41:55.947795

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '1c2b381890c7'
down_revision = '4c2127d5c55f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('citation',
    sa.Column('citation_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('citation', sa.String(), nullable=True),
    sa.Column('short_citation', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('citation_id')
    )
    op.add_column('reference', sa.Column('citation_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_reference_citation_id'), 'reference', ['citation_id'], unique=False)
    op.create_foreign_key(None, 'reference', 'citation', ['citation_id'], ['citation_id'])
    public_update_citations = PGFunction(
        schema="public",
        signature="update_citations(ref_id integer)",
        definition="returns text\nas $$\nDECLARE\n-- Short citation available to A-team system\n--   <first author\\: Last name and initial(s)>,\n--   <year>,\n--   <resource abbrev>\n--   <volume>(<issue>)\\:<page(s)>\n   sht_citation TEXT default '';\n   author_short author.name%type default '';\n   ref_year reference.page_range%type;\n   res_abbr TEXT default '';\n   journal TEXT;\n   volume reference.volume%type;\n   issue_name reference.issue_name%type;\n   page_range reference.page_range%type;\n   citation_identifier integer;\n   --- build <volume>(<issue>)\\:<page(s)> into ref_details\n   ref_details TEXT default '';\n   -- used in querys for short\n   iso resource.iso_abbreviation%type;\n   medline resource.iso_abbreviation%type;\n\n\n-- Long citation\n--  citation = get_citation_from_args(authorNames, year, title, journal,\n--                                     ref_db_obj.volume or '',\n--                                     ref_db_obj.issue_name or '',\n--                                     ref_db_obj.page_range or '')\n   long_citation TEXT default '';\n   -- volume, issue and page range same as short citation\n   title reference.title%type;\n   authors author.name%type default ' ';\n   auth record;\nBEGIN\n    raise notice 'update citations for %', ref_id;\n    -- Get first author for short citation\n    SELECT CONCAT(SUBSTRING(author.first_name, 1 ,1), ' ', author.last_name) FROM author into author_short\n      WHERE author.reference_id = ref_id AND\n            author.first_author = 't'\n        LIMIT 1;\n    -- raise notice 'auth add is %', author_short;\n    IF author_short is NULL THEN\n      SELECT CONCAT(SUBSTRING(author.first_name, 1 ,1), ' ', author.last_name) FROM author into author_short\n        WHERE author.reference_id = ref_id AND\n              author.first_author = 'f'\n          ORDER BY author.author_id\n          LIMIT 1;\n    END IF;\n    IF author_short is NULL THEN\n      author_short := ' ';\n    END IF;\n    -- raise notice 'Author for short is %', author_short;\n    -- Get list of authors for long citation\n    for auth in SELECT * FROM author\n      WHERE author.reference_id = ref_id\n    loop\n      -- raise notice 'Record %', auth;\n      authors := authors || auth.name || '; ';\n    end loop;\n    raise notice 'Authors %', authors;\n    IF authors != ' ' THEN\n      authors := SUBSTRING(authors, 1, LENGTH(authors)-2);\n    ELSE\n       authors := '';\n    END IF;\n    -- raise notice 'Authors %', authors;\n\n    -- Get the resource abbr\n    SELECT res.iso_abbreviation, res.medline_abbreviation, res.title into iso, medline, journal\n      FROM reference ref, resource res\n      WHERE ref.resource_id = res.resource_id AND\n            ref.reference_id = ref_id;\n    IF iso is not NULL THEN\n        res_abbr := iso;\n    ELSIF  medline is not NULL THEN\n        res_abbr :=  medline;\n    ELSE\n        res_abbr := ' ';\n    END IF;\n\n    -- Reference details\n    SELECT ref.title, ref.volume, ref.issue_name, ref.page_range, SUBSTRING(ref.date_published, 1,4), ref.citation_id into title, volume, issue_name, page_range, ref_year, citation_identifier\n      FROM reference ref\n      WHERE reference_id = ref_id;\n    if title is NULL THEN\n      title := '';\n    END IF;\n    if volume is NULL THEN\n      volume := '';\n    END IF;\n    if issue_name is NULL THEN\n      issue_name := '';\n    END IF;\n    if page_range is NULL THEN\n      page_range := '';\n    END IF;\n    if ref_year is NULL THEN\n      ref_year := '';\n    END IF;\n    if journal is NULL THEN\n      journal := '';\n    END IF;\n    -- build the ref_details\n    -- <volume>(<issue>)\\:<page(s)>\n    ref_details := volume || ' (' || issue_name || ')\\: ' || page_range;\n    raise notice 'rd\\: %', ref_details;\n    raise notice 'tit\\: %', title;\n    long_citation := authors || ', (' || ref_year || ') ' || title;\n    long_citation := long_citation || ' ' || journal || ' ' || ref_details;\n    raise notice '%', long_citation;\n\n\n    sht_citation :=  author_short || ', ' || ref_year || ', ' || res_abbr || ', ' || ref_details;\n    -- raise notice '%', sht_citation;\n    IF citation_identifier is NULL THEN\n      raise notice 'sh cit\\: %', sht_citation;\n      raise notice 'cit\\: %', long_citation;\n      INSERT INTO citation (citation, short_citation) VALUES (long_citation, sht_citation);\n      citation_identifier := (SELECT currval('citation_citation_id_seq'));\n      raise notice 'citation_id %', citation_identifier;\n      --RETURNING citation_id into citation_id;\n      UPDATE reference SET citation_id = get_next_citation_id() WHERE reference.reference_id = ref_id;\n    ELSE\n      UPDATE citation SET citation = long_citation, short_citation = sht_citation\n        WHERE citation.citation_id = citation_identifier;\n    END IF;\n    return 'DONE';\nEND $$ language plpgsql"
    )
    op.create_entity(public_update_citations)

    public_get_next_citation_id = PGFunction(
        schema="public",
        signature="get_next_citation_id()",
        definition="returns integer\nas $$\nBEGIN\n    return (SELECT currval('citation_citation_id_seq'));\nEND $$ language plpgsql"
    )
    op.create_entity(public_get_next_citation_id)

    public_trgfunc_author_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_author_update_citation()",
        definition='returns TRIGGER\nas $$\nBEGIN\n    PERFORM update_citations(NEW.reference_id);\n    return NEW;\nEND $$ language plpgsql'
    )
    op.create_entity(public_trgfunc_author_update_citation)

    public_trgfunc_reference_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_reference_update_citation()",
        definition="returns TRIGGER\nas $$\nBEGIN\n    raise notice 'trgfunc_reference_update_citation\\: %\\: % % %', NEW.reference_id, NEW.title, OLD.title, OLD.curie;\n    IF NEW.title != OLD.title OR\n       NEW.volume != OLD.volume OR\n       NEW.issue_name != OLD.issue_name OR\n       NEW.page_range != OLD.page_range OR\n       NEW.date_published != OLD.date_published THEN\n         raise notice 'Calling update_citations with %', NEW.title;\n         PERFORM update_citations(NEW.reference_id);\n    ELSE\n       raise notice 'Failed update critieria?';\n    END IF;\n    raise notice 'Exiting trgfunc_reference_update_citation';\n    return NEW;\nEND $$ language plpgsql"
    )
    op.create_entity(public_trgfunc_reference_update_citation)

    public_trgfunc_reference_create_citation = PGFunction(
        schema="public",
        signature="trgfunc_reference_create_citation()",
        definition="returns TRIGGER\nas $$\nBEGIN\n    raise notice 'trgfunc_reference_create_citation\\: %\\: % % %', NEW.reference_id, NEW.title, OLD.title, OLD.curie;\n    PERFORM update_citations(NEW.reference_id);\n    raise notice 'Exiting trgfunc_reference_create_citation';\n    return NEW;\nEND $$ language plpgsql"
    )
    op.create_entity(public_trgfunc_reference_create_citation)

    public_trgfunc_resource_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_resource_update_citation()",
        definition='returns TRIGGER\nas $$\nBEGIN\n    IF NEW.iso_abbreviation != OLD.iso_abbreviation OR\n       NEW.medline_abbreviation != OLD.medline_abbreviation OR\n       NEW.title != OLD.title THEN\n         PERFORM update_citations(NEW.reference_id);\n    END IF;\n    return NEW;\nEND $$ language plpgsql'
    )
    op.create_entity(public_trgfunc_resource_update_citation)

    public_author_trg_author_update_citation = PGTrigger(
        schema="public",
        signature="trg_author_update_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER UPDATE ON pubic.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.create_entity(public_author_trg_author_update_citation)

    public_author_trg_author_create_citation = PGTrigger(
        schema="public",
        signature="trg_author_create_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER INSERT ON public.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.create_entity(public_author_trg_author_create_citation)

    public_author_trg_author_delete_citation = PGTrigger(
        schema="public",
        signature="trg_author_delete_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER DELETE ON public.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.create_entity(public_author_trg_author_delete_citation)

    public_reference_trg_reference_update_citation = PGTrigger(
        schema="public",
        signature="trg_reference_update_citation",
        on_entity="public.reference",
        is_constraint=False,
        definition='AFTER UPDATE ON reference\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_reference_update_citation()'
    )
    op.create_entity(public_reference_trg_reference_update_citation)

    public_reference_trg_reference_create_citation = PGTrigger(
        schema="public",
        signature="trg_reference_create_citation",
        on_entity="public.reference",
        is_constraint=False,
        definition='AFTER INSERT ON reference\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_reference_create_citation()'
    )
    op.create_entity(public_reference_trg_reference_create_citation)

    public_resource_trg_reference_update_citation = PGTrigger(
        schema="public",
        signature="trg_reference_update_citation",
        on_entity="public.resource",
        is_constraint=False,
        definition='AFTER UPDATE ON resource\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_resource_update_citation()'
    )
    op.create_entity(public_resource_trg_reference_update_citation)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_resource_trg_reference_update_citation = PGTrigger(
        schema="public",
        signature="trg_reference_update_citation",
        on_entity="public.resource",
        is_constraint=False,
        definition='AFTER UPDATE ON resource\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_resource_update_citation()'
    )
    op.drop_entity(public_resource_trg_reference_update_citation)

    public_reference_trg_reference_create_citation = PGTrigger(
        schema="public",
        signature="trg_reference_create_citation",
        on_entity="public.reference",
        is_constraint=False,
        definition='AFTER INSERT ON reference\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_reference_create_citation()'
    )
    op.drop_entity(public_reference_trg_reference_create_citation)

    public_reference_trg_reference_update_citation = PGTrigger(
        schema="public",
        signature="trg_reference_update_citation",
        on_entity="public.reference",
        is_constraint=False,
        definition='AFTER UPDATE ON reference\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_reference_update_citation()'
    )
    op.drop_entity(public_reference_trg_reference_update_citation)

    public_author_trg_author_delete_citation = PGTrigger(
        schema="public",
        signature="trg_author_delete_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER DELETE ON public.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.drop_entity(public_author_trg_author_delete_citation)

    public_author_trg_author_create_citation = PGTrigger(
        schema="public",
        signature="trg_author_create_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER INSERT ON public.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.drop_entity(public_author_trg_author_create_citation)

    public_author_trg_author_update_citation = PGTrigger(
        schema="public",
        signature="trg_author_update_citation",
        on_entity="public.author",
        is_constraint=False,
        definition='AFTER UPDATE ON pubic.author\n        FOR EACH ROW\n        EXECUTE FUNCTION public.trgfunc_author_update_citation()'
    )
    op.drop_entity(public_author_trg_author_update_citation)

    public_trgfunc_resource_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_resource_update_citation()",
        definition='returns TRIGGER\nas $$\nBEGIN\n    IF NEW.iso_abbreviation != OLD.iso_abbreviation OR\n       NEW.medline_abbreviation != OLD.medline_abbreviation OR\n       NEW.title != OLD.title THEN\n         PERFORM update_citations(NEW.reference_id);\n    END IF;\n    return NEW;\nEND $$ language plpgsql'
    )
    op.drop_entity(public_trgfunc_resource_update_citation)

    public_trgfunc_reference_create_citation = PGFunction(
        schema="public",
        signature="trgfunc_reference_create_citation()",
        definition="returns TRIGGER\nas $$\nBEGIN\n    raise notice 'trgfunc_reference_create_citation\\: %\\: % % %', NEW.reference_id, NEW.title, OLD.title, OLD.curie;\n    PERFORM update_citations(NEW.reference_id);\n    raise notice 'Exiting trgfunc_reference_create_citation';\n    return NEW;\nEND $$ language plpgsql"
    )
    op.drop_entity(public_trgfunc_reference_create_citation)

    public_trgfunc_reference_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_reference_update_citation()",
        definition="returns TRIGGER\nas $$\nBEGIN\n    raise notice 'trgfunc_reference_update_citation\\: %\\: % % %', NEW.reference_id, NEW.title, OLD.title, OLD.curie;\n    IF NEW.title != OLD.title OR\n       NEW.volume != OLD.volume OR\n       NEW.issue_name != OLD.issue_name OR\n       NEW.page_range != OLD.page_range OR\n       NEW.date_published != OLD.date_published THEN\n         raise notice 'Calling update_citations with %', NEW.title;\n         PERFORM update_citations(NEW.reference_id);\n    ELSE\n       raise notice 'Failed update critieria?';\n    END IF;\n    raise notice 'Exiting trgfunc_reference_update_citation';\n    return NEW;\nEND $$ language plpgsql"
    )
    op.drop_entity(public_trgfunc_reference_update_citation)

    public_trgfunc_author_update_citation = PGFunction(
        schema="public",
        signature="trgfunc_author_update_citation()",
        definition='returns TRIGGER\nas $$\nBEGIN\n    PERFORM update_citations(NEW.reference_id);\n    return NEW;\nEND $$ language plpgsql'
    )
    op.drop_entity(public_trgfunc_author_update_citation)

    public_get_next_citation_id = PGFunction(
        schema="public",
        signature="get_next_citation_id()",
        definition="returns integer\nas $$\nBEGIN\n    return (SELECT currval('citation_citation_id_seq'));\nEND $$ language plpgsql"
    )
    op.drop_entity(public_get_next_citation_id)

    public_update_citations = PGFunction(
        schema="public",
        signature="update_citations(ref_id integer)",
        definition="returns text\nas $$\nDECLARE\n-- Short citation available to A-team system\n--   <first author\\: Last name and initial(s)>,\n--   <year>,\n--   <resource abbrev>\n--   <volume>(<issue>)\\:<page(s)>\n   sht_citation TEXT default '';\n   author_short author.name%type default '';\n   ref_year reference.page_range%type;\n   res_abbr TEXT default '';\n   journal TEXT;\n   volume reference.volume%type;\n   issue_name reference.issue_name%type;\n   page_range reference.page_range%type;\n   citation_identifier integer;\n   --- build <volume>(<issue>)\\:<page(s)> into ref_details\n   ref_details TEXT default '';\n   -- used in querys for short\n   iso resource.iso_abbreviation%type;\n   medline resource.iso_abbreviation%type;\n\n\n-- Long citation\n--  citation = get_citation_from_args(authorNames, year, title, journal,\n--                                     ref_db_obj.volume or '',\n--                                     ref_db_obj.issue_name or '',\n--                                     ref_db_obj.page_range or '')\n   long_citation TEXT default '';\n   -- volume, issue and page range same as short citation\n   title reference.title%type;\n   authors author.name%type default ' ';\n   auth record;\nBEGIN\n    raise notice 'update citations for %', ref_id;\n    -- Get first author for short citation\n    SELECT CONCAT(SUBSTRING(author.first_name, 1 ,1), ' ', author.last_name) FROM author into author_short\n      WHERE author.reference_id = ref_id AND\n            author.first_author = 't'\n        LIMIT 1;\n    -- raise notice 'auth add is %', author_short;\n    IF author_short is NULL THEN\n      SELECT CONCAT(SUBSTRING(author.first_name, 1 ,1), ' ', author.last_name) FROM author into author_short\n        WHERE author.reference_id = ref_id AND\n              author.first_author = 'f'\n          ORDER BY author.author_id\n          LIMIT 1;\n    END IF;\n    IF author_short is NULL THEN\n      author_short := ' ';\n    END IF;\n    -- raise notice 'Author for short is %', author_short;\n    -- Get list of authors for long citation\n    for auth in SELECT * FROM author\n      WHERE author.reference_id = ref_id\n    loop\n      -- raise notice 'Record %', auth;\n      authors := authors || auth.name || '; ';\n    end loop;\n    raise notice 'Authors %', authors;\n    IF authors != ' ' THEN\n      authors := SUBSTRING(authors, 1, LENGTH(authors)-2);\n    ELSE\n       authors := '';\n    END IF;\n    -- raise notice 'Authors %', authors;\n\n    -- Get the resource abbr\n    SELECT res.iso_abbreviation, res.medline_abbreviation, res.title into iso, medline, journal\n      FROM reference ref, resource res\n      WHERE ref.resource_id = res.resource_id AND\n            ref.reference_id = ref_id;\n    IF iso is not NULL THEN\n        res_abbr := iso;\n    ELSIF  medline is not NULL THEN\n        res_abbr :=  medline;\n    ELSE\n        res_abbr := ' ';\n    END IF;\n\n    -- Reference details\n    SELECT ref.title, ref.volume, ref.issue_name, ref.page_range, SUBSTRING(ref.date_published, 1,4), ref.citation_id into title, volume, issue_name, page_range, ref_year, citation_identifier\n      FROM reference ref\n      WHERE reference_id = ref_id;\n    if title is NULL THEN\n      title := '';\n    END IF;\n    if volume is NULL THEN\n      volume := '';\n    END IF;\n    if issue_name is NULL THEN\n      issue_name := '';\n    END IF;\n    if page_range is NULL THEN\n      page_range := '';\n    END IF;\n    if ref_year is NULL THEN\n      ref_year := '';\n    END IF;\n    if journal is NULL THEN\n      journal := '';\n    END IF;\n    -- build the ref_details\n    -- <volume>(<issue>)\\:<page(s)>\n    ref_details := volume || ' (' || issue_name || ')\\: ' || page_range;\n    raise notice 'rd\\: %', ref_details;\n    raise notice 'tit\\: %', title;\n    long_citation := authors || ', (' || ref_year || ') ' || title;\n    long_citation := long_citation || ' ' || journal || ' ' || ref_details;\n    raise notice '%', long_citation;\n\n\n    sht_citation :=  author_short || ', ' || ref_year || ', ' || res_abbr || ', ' || ref_details;\n    -- raise notice '%', sht_citation;\n    IF citation_identifier is NULL THEN\n      raise notice 'sh cit\\: %', sht_citation;\n      raise notice 'cit\\: %', long_citation;\n      INSERT INTO citation (citation, short_citation) VALUES (long_citation, sht_citation);\n      citation_identifier := (SELECT currval('citation_citation_id_seq'));\n      raise notice 'citation_id %', citation_identifier;\n      --RETURNING citation_id into citation_id;\n      UPDATE reference SET citation_id = get_next_citation_id() WHERE reference.reference_id = ref_id;\n    ELSE\n      UPDATE citation SET citation = long_citation, short_citation = sht_citation\n        WHERE citation.citation_id = citation_identifier;\n    END IF;\n    return 'DONE';\nEND $$ language plpgsql"
    )
    op.drop_entity(public_update_citations)

    op.drop_constraint(None, 'reference', type_='foreignkey')
    op.drop_index(op.f('ix_reference_citation_id'), table_name='reference')
    op.drop_column('reference', 'citation_id')
    op.drop_table('citation')
    # ### end Alembic commands ###
