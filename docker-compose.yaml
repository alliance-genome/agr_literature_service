version: "3.7"

services:
  postgres:
    image: postgres:13.1-alpine
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: ${PSQL_USERNAME}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${PSQL_DATABASE}
    volumes:
      - "agr-literature-pg-data:/var/lib/postgresql/data"
      - "./postgresql.conf:/etc/postgresql.conf"
    networks:
      - agr-literature
    # ports needed by pgadmin to connect through host.docker.internal
    ports:
      - "${PSQL_PORT}:${PSQL_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PSQL_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      postgres -c config_file=/etc/postgresql.conf -p ${PSQL_PORT}


  pgadmin:
    image: dpage/pgadmin4:5.1
    hostname: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      PGADMIN_LISTEN_PORT: 81
    ports:
      - "${PGADMIN_PORT}:81"
    volumes:
      - "agr-literature-pgadmin-data:/var/lib/pgadmin"
    networks:
      - agr-literature
    depends_on:
      - postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    hostname: elasticsearch
    restart: always
    environment:
      - node.name=aws-literature-es1
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - "agr-literature-es-data:/usr/share/elasticsearch/data"
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    networks:
      - agr-literature

  initdb:
    build:
      context: .
      dockerfile: docker/initdb.dockerfile
    hostname: initdb
    networks:
      - agr-literature
    depends_on:
      - postgres
    restart: on-failure

  pgsync:
    build:
      context: .
      dockerfile: docker/pgsync.dockerfile
    sysctls:
      - net.ipv4.tcp_keepalive_time=300
      - net.ipv4.tcp_keepalive_intvl=300
      - net.ipv4.tcp_keepalive_probes=10
    hostname: pgsync
    networks:
      - agr-literature
    volumes:
      - "./pgsync_schema.json:/src/app/pgsync_schema.json"
    environment:
      PG_USER: "${PG_USER}"
      PG_PASSWORD: "${PG_PASSWORD}"
      PG_HOST: "${PG_HOST}"
      PG_PORT: "${PG_PORT}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      ELASTICSEARCH_TIMEOUT: 100
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_AUTH: "${REDIS_AUTH}"
    depends_on:
      - redis
    restart: on-failure

  redis:
    image: "redis:alpine"
    hostname: redis
    restart: always
    command: redis-server --requirepass "${REDIS_AUTH}"
    volumes:
      - "./redis.conf:/usr/local/etc/redis/redis.conf"
    environment:
     - REDIS_REPLICATION_MODE=master
    networks:
      - agr-literature

  api:
    restart: always
    build:
      context: .
      dockerfile: docker/api.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/src/xml_processing:/usr/local/bin/src/literature/backend/app"
      XML_PATH: "/usr/local/bin/src/literature/src/xml_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
    hostname: literature_api
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
    depends_on:
      - postgres
    ports:
      - "${API_PORT}:8080"

  xml_processing:
    restart: always
    build:
      context: .
      dockerfile: docker/xml_processing.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: literature_xml_processing
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/src/xml_processing:/usr/local/bin/src/literature/backend/app"
      XML_PATH: "/usr/local/bin/src/literature/src/xml_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      REG: "${REG}"
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
    depends_on:
      - api

  test_runner:
    build:
      context: .
      dockerfile: docker/test_runner.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: test_runner
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/src/xml_processing:/usr/local/bin/src/literature/backend/app"
      XML_PATH: "/usr/local/bin/src/literature/src/xml_processing/tests/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      REG: "${REG}"
    volumes:
      - agr-logs:/logs
      - .:/usr/local/bin/src/literature
    networks:
      - agr-literature
    depends_on:
      - api

  dev_app:
    restart: always
    build:
      context: .
      dockerfile: docker/dev-app.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: dev_app
    environment:
      API_PORT: "8080"
      API_SERVER: "localhost"
      PYTHONPATH: "/usr/local/bin/src/literature/src/xml_processing:/usr/local/bin/src/literature/backend/app"
      XML_PATH: "/usr/local/bin/src/literature/src/xml_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      REG: "${REG}"
    ports:
      - "8080:8080"
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
    depends_on:
      - postgres

volumes:
  agr-literature-pg-data:
  agr-literature-redis-data:
  agr-literature-pgadmin-data:
  agr-literature-es-data:
  agr-logs:

networks:
  agr-literature:
