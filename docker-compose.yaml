version: "3.7"

services:
  postgres:
    image: postgres:13.1-alpine
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: ${PSQL_USERNAME}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${PSQL_DATABASE}
    volumes:
      - "agr-literature-pg-data:/var/lib/postgresql/data"
      - "./postgresql.conf:/etc/postgresql.conf"
    networks:
      - agr-literature
    # ports needed by pgadmin to connect through host.docker.internal
    ports:
      - "${PSQL_PORT}:${PSQL_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PSQL_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      postgres -c config_file=/etc/postgresql.conf -p ${PSQL_PORT}


  pgadmin:
    image: dpage/pgadmin4:5.1
    hostname: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      PGADMIN_LISTEN_PORT: 81
    ports:
      - "${PGADMIN_PORT}:81"
    volumes:
      - "agr-literature-pgadmin-data:/var/lib/pgadmin"
    networks:
      - agr-literature
    depends_on:
      - postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    hostname: elasticsearch
    restart: always
    environment:
      - node.name=aws-literature-es1
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - "agr-literature-es-data:/usr/share/elasticsearch/data"
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    networks:
      - agr-literature

  api:
    restart: always
    build:
      context: .
      dockerfile: docker/api.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/"
      XML_PATH: "/usr/local/bin/src/literature/agr_literature_service/lit_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      ELASTICSEARCH_INDEX: "${ELASTICSEARCH_INDEX}"
    hostname: literature_api
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
    depends_on:
      - postgres
    ports:
      - "${API_PORT}:8080"

  xml_processing:
    restart: always
    build:
      context: .
      dockerfile: docker/xml_processing.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: literature_xml_processing
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/"
      XML_PATH: "/usr/local/bin/src/literature/agr_literature_service/lit_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      REG: "${REG}"
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
    depends_on:
      - api

  automated_scripts:
    restart: always
    build:
      context: .
      dockerfile: docker/automated_scripts.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    environment:
      PYTHONPATH: "/usr/src/app"
      XML_PATH: "/usr/src/app/agr_literature_service/lit_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      REG: "${REG}"
      LOG_PATH: "/var/log/automated_scripts/"
      LOG_URL: "${LOG_URL}"
      CRONTAB_EMAIL: "${CRONTAB_EMAIL}"
      SENDER_EMAIL: "${SENDER_EMAIL}"
      SENDER_PASSWORD: "${SENDER_PASSWORD}"
      REPLY_TO: "${REPLY_TO}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      ELASTICSEARCH_INDEX: "${ELASTICSEARCH_INDEX}"
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
    volumes:
      - "${LOG_PATH}:/var/log/automated_scripts"
      - /etc/localtime:/etc/localtime:ro

  test_runner:
    build:
      context: .
      dockerfile: docker/test_runner.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: test_runner
    environment:
      API_PORT: "${API_PORT}"
      API_SERVER: "${API_SERVER}"
      PYTHONPATH: "/usr/local/bin/src/literature/"
      XML_PATH: "/usr/local/bin/src/literature/agr_literature_service/lit_processing/tests/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      ELASTICSEARCH_INDEX: "${ELASTICSEARCH_INDEX}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      REG: "${REG}"
    volumes:
      - agr-logs:/logs
      - .:/usr/local/bin/src/literature
    networks:
      - agr-literature
    depends_on:
      - api

  dev_app:
    restart: always
    build:
      context: .
      dockerfile: docker/dev-app.dockerfile
      args:
        REG: ${REG}
        ALLIANCE_RELEASE: ${ALLIANCE_RELEASE}
    hostname: dev_app
    environment:
      API_PORT: "8080"
      API_SERVER: "localhost"
      PYTHONPATH: "/usr/local/bin/src/literature/"
      XML_PATH: "/usr/local/bin/src/literature/agr_literature_service/lit_processing/"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      OKTA_CLIENT_ID: "${OKTA_CLIENT_ID}"
      OKTA_CLIENT_SECRET: "${OKTA_CLIENT_SECRET}"
      ENV_STATE: "${ENV_STATE}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      ELASTICSEARCH_INDEX: "${ELASTICSEARCH_INDEX}"
      RESOURCE_DESCRIPTOR_URL: "${RESOURCE_DESCRIPTOR_URL}"
      HOST: "${HOST}"
      OKTA_DOMAIN: "${OKTA_DOMAIN}"
      OKTA_API_AUDIENCE: "${OKTA_API_AUDIENCE}"
      REG: "${REG}"
    ports:
      - "8080:8080"
    networks:
      - agr-literature
    volumes:
      - agr-logs:/logs
      - .:/usr/local/bin/src/literature
    depends_on:
      - postgres

  dbz_zookeeper:
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - agr-literature

  dbz_kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
    environment:
      - ZOOKEEPER_CONNECT=dbz_zookeeper:2181
    networks:
      - agr-literature

  dbz_connector:
    build:
      context: .
      dockerfile: docker/debezium_connector.dockerfile
    ports:
      - 8083:8083
    environment:
      - BOOTSTRAP_SERVERS=dbz_kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_source_connect_configs
      - OFFSET_STORAGE_TOPIC=my_source_connect_offsets
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    networks:
      - agr-literature

  dbz_setup:
    build:
      context: .
      dockerfile: docker/debezium_setup.dockerfile
    environment:
      ELASTICSEARCH_HOST: "${ELASTICSEARCH_HOST}"
      ELASTICSEARCH_PORT: "${ELASTICSEARCH_PORT}"
      DEBEZIUM_CONNECTOR_HOST: "${DEBEZIUM_CONNECTOR_HOST}"
      DEBEZIUM_CONNECTOR_PORT: "${DEBEZIUM_CONNECTOR_PORT}"
      DEBEZIUM_INDEX_NAME: "${DEBEZIUM_INDEX_NAME}"
      DEBEZIUM_KSQLDB_HOST: "${DEBEZIUM_KSQLDB_HOST}"
      DEBEZIUM_KSQLDB_PORT: "${DEBEZIUM_KSQLDB_PORT}"
      PSQL_USERNAME: "${PSQL_USERNAME}"
      PSQL_PASSWORD: "${PSQL_PASSWORD}"
      PSQL_HOST: "${PSQL_HOST}"
      PSQL_PORT: "${PSQL_PORT}"
      PSQL_DATABASE: "${PSQL_DATABASE}"
    volumes:
      - "./debezium/elasticsearch-sink.json:/elasticsearch-sink.json"
      - "./debezium/postgres-source.json:/postgres-source.json"
      - "./debezium/elasticsearch-settings.json:/elasticsearch-settings.json"
      - "./debezium/setup.sh:/setup.sh"
    networks:
      - agr-literature
    command:
      /setup.sh

  dbz_ksql_server:
    image: confluentinc/ksqldb-server:0.26.0
    depends_on:
      - dbz_kafka
      - dbz_connector
    ports:
      - "8088:8088"
    hostname: dbz_ksql_server
    environment:
      - KSQL_BOOTSTRAP_SERVERS=dbz_kafka:9092
      - KSQL_HOST_NAME=dbz_ksql_server
      - KSQL_APPLICATION_ID="cp-all-in-one"
      - KSQL_LISTENERS=http://0.0.0.0:8088
      - KSQL_CACHE_MAX_BYTES_BUFFERING=0
    networks:
      - agr-literature

  # KSQLDB client for manual queries during development
  #
  # To start it:
  # - start the docker-compose service: $ docker-compose up -d dbz_ksql_cli
  # - run bash on the container: $ docker exec -it agr-literature-main_dbz_ksql_cli_1 bash
  # - determine the server IP address (for some reason this version of ksqldb cli does not work with host names): $ ping dbz_ksql_server
  # - start the ksql client connecting to the server: $ ksql http://<ksqldb_server_ip>:8088
  dbz_ksql_cli:
    image: confluentinc/ksqldb-cli:0.26.0
    depends_on:
      - dbz_ksql_server
    networks:
      - agr-literature
    entrypoint:
      - /bin/bash
    tty: true

volumes:
  agr-literature-pg-data:
  agr-literature-pgadmin-data:
  agr-literature-es-data:
  agr-logs:

networks:
  agr-literature:
