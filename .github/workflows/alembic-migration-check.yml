name: Alembic Migration Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  check-alembic-migrations:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get base branch
        id: base-branch
        run: |
          echo "base_ref=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
      
      - name: Check for new Alembic migrations
        id: check-migrations
        run: |
          # Get the base branch reference
          BASE_REF="origin/${{ steps.base-branch.outputs.base_ref }}"
          
          # Check if there are new migration files
          NEW_MIGRATIONS=$(git diff --name-only "$BASE_REF"...HEAD | grep -E "^alembic/versions/.*\.py$" | wc -l)
          
          echo "new_migrations=$NEW_MIGRATIONS" >> $GITHUB_OUTPUT
          
          if [ "$NEW_MIGRATIONS" -gt 0 ]; then
            echo "Found $NEW_MIGRATIONS new migration file(s)"
            git diff --name-only "$BASE_REF"...HEAD | grep -E "^alembic/versions/.*\.py$" | while read file; do
              echo "  - $file"
            done
          else
            echo "No new migration files found"
          fi
      
      - name: Create status check for migrations
        if: steps.check-migrations.outputs.new_migrations > 0
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              check_name: 'Alembic Migration Applied'
            });
            
            // Check if status check already exists and is successful
            const existingCheck = checks.check_runs.find(check => 
              check.name === 'Alembic Migration Applied' && check.conclusion === 'success'
            );
            
            if (!existingCheck) {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Alembic Migration Applied',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: 'action_required',
                output: {
                  title: 'Alembic Migration Detected',
                  summary: 'This PR contains new Alembic migration files. Please ensure migrations are applied before merging.',
                  text: `⚠️ **Database Migration Required**
                  
This PR contains new Alembic migration files that need to be applied to the database before merging.

**Required Actions:**
1. Apply migrations to staging/development environment
2. Verify migrations work correctly
3. Check that rollback works if needed
4. Confirm with team lead before merging

**Migration Files:**
${ steps.check-migrations.outputs.new_migrations } new migration file(s) detected.

**To mark this check as passed:**
Comment on this PR with: \`/approve-migration\`
                  `
                }
              });
            }
      
      - name: Comment on PR about migration
        if: steps.check-migrations.outputs.new_migrations > 0
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔄 **Alembic Migration Detected**')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `🔄 **Alembic Migration Detected**
                
This PR contains **${{ steps.check-migrations.outputs.new_migrations }}** new Alembic migration file(s).

**⚠️ IMPORTANT: Database migrations must be applied before merging!**

**Required Steps:**
- [ ] Apply migrations to staging/development environment
- [ ] Verify migrations execute successfully
- [ ] Test rollback functionality
- [ ] Confirm with team lead/DBA
- [ ] Comment \`/approve-migration\` to mark as ready

**Migration Files:**
$(git diff --name-only origin/${{ steps.base-branch.outputs.base_ref }}...HEAD | grep -E "^alembic/versions/.*\.py$" | sed 's/^/- /')

**Commands to apply migrations:**
\`\`\`bash
# Apply latest migrations
make alembic-apply-latest-migration

# Or manually:
alembic upgrade head
\`\`\`

> **Note:** This status check must pass before the PR can be merged.`
              });
            }

  handle-approval:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/approve-migration')
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: Check if commenter has permission
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });
            
            if (!['admin', 'write', 'maintain'].includes(collaborator.permission)) {
              throw new Error('Only maintainers can approve migrations');
            }
      
      - name: Update status check to success
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Alembic Migration Applied',
              head_sha: pr.head.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Migration Approved',
                summary: `Migration approved by @${context.payload.comment.user.login}`,
                text: `✅ **Migration Approved**
                
Approved by: @${context.payload.comment.user.login}
Time: ${new Date().toISOString()}

The migration has been confirmed as applied and tested.`
              }
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ **Migration Approved**
              
@${context.payload.comment.user.login} has approved the migration. The status check has been updated to passing.`
            });