name: Alembic Migration Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  check-alembic-migrations:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new Alembic migrations
        id: check-migrations
        run: |
          # Get the base branch reference
          BASE_REF="origin/${{ github.event.pull_request.base.ref }}"

          # Check if there are new migration files
          NEW_MIGRATIONS=$(git diff --name-only "$BASE_REF"...HEAD | grep -E "^alembic/versions/.*\.py$" | wc -l)

          echo "new_migrations=$NEW_MIGRATIONS" >> $GITHUB_OUTPUT

          if [ "$NEW_MIGRATIONS" -gt 0 ]; then
            echo "Found $NEW_MIGRATIONS new migration file(s)"
            git diff --name-only "$BASE_REF"...HEAD | grep -E "^alembic/versions/.*\.py$" | while read file; do
              echo "  - $file"
            done
          else
            echo "No new migration files found"
          fi

      - name: Create status check for migrations
        if: steps.check-migrations.outputs.new_migrations > 0
        uses: actions/github-script@v7
        with:
          script: |
            const migrationCount = '${{ steps.check-migrations.outputs.new_migrations }}';

            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              check_name: 'Alembic Migration Applied'
            });

            const existingCheck = checks.check_runs.find(check =>
              check.name === 'Alembic Migration Applied' && check.conclusion === 'success'
            );

            if (!existingCheck) {
              const message = '⚠️ Database Migration Required\n\n' +
                'This PR contains new Alembic migration files that need to be applied to the database before merging.\n\n' +
                'Required Actions:\n' +
                '1. Apply migrations to staging/development environment\n' +
                '2. Verify migrations work correctly\n' +
                '3. Check that rollback works if needed\n' +
                '4. Confirm with team lead before merging\n\n' +
                'Migration Files: ' + migrationCount + ' new migration file(s) detected.\n\n' +
                'To mark this check as passed: Comment on this PR with /approve-migration';

              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Alembic Migration Applied',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: 'action_required',
                output: {
                  title: 'Alembic Migration Detected',
                  summary: 'This PR contains new Alembic migration files. Please ensure migrations are applied before merging.',
                  text: message
                }
              });
            }

      - name: Comment on PR about migration
        if: steps.check-migrations.outputs.new_migrations > 0
        uses: actions/github-script@v7
        with:
          script: |
            const migrationCount = '${{ steps.check-migrations.outputs.new_migrations }}';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🔄 Alembic Migration Detected')
            );

            if (!botComment) {
              const message = '🔄 **Alembic Migration Detected**\n\n' +
                'This PR contains **' + migrationCount + '** new Alembic migration file(s).\n\n' +
                '**⚠️ IMPORTANT: Database migrations must be applied before merging!**\n\n' +
                '**Required Steps:**\n' +
                '- [ ] Apply migrations to staging/development environment\n' +
                '- [ ] Verify migrations execute successfully\n' +
                '- [ ] Test rollback functionality\n' +
                '- [ ] Confirm with team lead/DBA\n' +
                '- [ ] Comment `/approve-migration` to mark as ready\n\n' +
                '**Commands to apply migrations:**\n' +
                '```bash\n' +
                '# Apply latest migrations\n' +
                'make alembic-apply-latest-migration\n\n' +
                '# Or manually:\n' +
                'alembic upgrade head\n' +
                '```\n\n' +
                '> **Note:** This status check must pass before the PR can be merged.';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }

  handle-approval:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/approve-migration')
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Check if commenter has permission
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });

            if (!['admin', 'write', 'maintain'].includes(collaborator.permission)) {
              throw new Error('Only maintainers can approve migrations');
            }

      - name: Update status check to success
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });

            const approvedMessage = '✅ Migration Approved\n\n' +
              'Approved by: @' + context.payload.comment.user.login + '\n' +
              'Time: ' + new Date().toISOString() + '\n\n' +
              'The migration has been confirmed as applied and tested.';

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Alembic Migration Applied',
              head_sha: pr.head.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Migration Approved',
                summary: 'Migration approved by @' + context.payload.comment.user.login,
                text: approvedMessage
              }
            });

            const commentMessage = '✅ **Migration Approved**\n\n' +
              '@' + context.payload.comment.user.login + ' has approved the migration. The status check has been updated to passing.';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: commentMessage
            });