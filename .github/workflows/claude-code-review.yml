name: Claude Code Review

# IMPORTANT: This workflow automatically runs ONLY when a PR is first opened.
# To request another review after making changes, comment "@claude Please review my changes."

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main  # Run on PRs targeting the main branch (not alpha like curation)
  issue_comment:
    types: [created]

jobs:
  claude-review:
    # Only run on pull requests to main and PR comments (not issue comments)
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'issue_comment' && github.event.issue.pull_request)
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write  # Required for OIDC
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Match OIDC session duration to prevent hanging reviews
    
    steps:
      - name: Checkout repository
        if: github.event_name == 'pull_request' || (github.event_name == 'issue_comment' && github.event.issue.pull_request)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check trigger
        id: check-trigger
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "opened" ]]; then
            echo "triggered=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" && "${{ github.event.issue.pull_request }}" != "" ]]; then
            COMMENT="$COMMENT_BODY"
            if [[ "$COMMENT" == *"@claude"* ]]; then
              echo "triggered=true" >> $GITHUB_OUTPUT
              echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            else
              echo "triggered=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details and calculate size
        if: steps.check-trigger.outputs.triggered == 'true'
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(${{ steps.check-trigger.outputs.pr_number }})
            });
            
            // Check if PR targets main branch (for comment-triggered reviews)
            if (pr.data.base.ref !== 'main') {
              core.setOutput('skip_non_main', 'true');
              core.setOutput('base_branch', pr.data.base.ref);
              core.setOutput('pr_size', '0');  // Default value to prevent undefined variable
              core.setOutput('files_changed', '0');  // Default value to prevent undefined variable
              return;
            }
            
            // Calculate PR size excluding binary files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(${{ steps.check-trigger.outputs.pr_number }})
            });
            
            let totalChanges = 0;
            
            for (const file of files.data) {
              // Skip binary files
              if (file.patch) {
                totalChanges += file.changes;
              }
            }
            
            core.setOutput('pr_size', totalChanges);
            core.setOutput('files_changed', files.data.length);

      - name: Post non-main branch message
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(${{ steps.check-trigger.outputs.pr_number }}),
              body: `🤖 **Claude Code Review Not Available**
              
              This PR targets the **\`${{ steps.pr-details.outputs.base_branch }}\`** branch.
              
              Claude Code reviews are currently only available for PRs targeting the **main** branch.
              
              If you need code review assistance for this PR, please:
              1. Target your PR to the main branch first
              2. After review and merge to main, create a PR from main to \`${{ steps.pr-details.outputs.base_branch }}\`
              
              This helps ensure code quality while managing review costs effectively.`
            });

      - name: Determine review strategy
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true'
        id: strategy
        run: |
          set -euo pipefail
          PR_SIZE=${{ steps.pr-details.outputs.pr_size }}
          SKIP_THRESHOLD=3
          
          if [ "$PR_SIZE" -le "$SKIP_THRESHOLD" ]; then
            echo "skip_review=true" >> $GITHUB_OUTPUT
            echo "reason=PR too small (${PR_SIZE} lines)" >> $GITHUB_OUTPUT
          else
            echo "skip_review=false" >> $GITHUB_OUTPUT
            echo "reason=Standard review (${PR_SIZE} lines)" >> $GITHUB_OUTPUT
          fi

      - name: Post skip message
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(${{ steps.check-trigger.outputs.pr_number }}),
              body: `🤖 **Claude Code Review Skipped**
              
              This PR has only **${{ steps.pr-details.outputs.pr_size }} lines changed** (≤ 3 lines).
              
              Claude reviews are automatically skipped for trivial changes to save costs and reduce noise.
              
              **Need a review anyway?** Comment \`@claude\` to trigger a manual review.
              
              ---
              
              **Review strategy (current thresholds):**
              - **≤ 3 lines**: Skipped - this PR
              - **> 3 lines**: Standard Claude Sonnet review
              
              ---
              
              💡 **Claude Code Capabilities**
              
              I can help with more than just reviews! Try these:
              - **Answer Questions**: \`@claude explain how the literature curation system works\`
              - **Implement Code Changes**: \`@claude add validation for publication references\`
              - **Debug Issues**: \`@claude help debug why the citation parser is failing\`
              - **Analyze Architecture**: \`@claude review the literature data model changes\`
              - **Perform another review**: \`@claude Please review my changes\`
              
              Just comment \`@claude\` followed by your request!`
            });

      - name: Configure AWS credentials (OIDC)
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CLAUDE_CODE_PR_LITERATURE_ROLE_ARN }}
          aws-region: us-east-1
          role-duration-seconds: 1800  # 30 minutes - balance security and review completion

      - name: Get database configuration from AWS
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        id: db-config
        run: |
          set -euo pipefail
          
          # Get shared configuration
          CONFIG=$(aws secretsmanager get-secret-value \
            --secret-id /claude-code-pr/config \
            --query SecretString --output text) || {
            echo "❌ Failed to retrieve config from AWS Secrets Manager"
            exit 1
          }
          
          # Get literature-specific configuration
          LITERATURE_CONFIG=$(aws secretsmanager get-secret-value \
            --secret-id /claude-code-pr/agr_literature_service/db_credentials \
            --query SecretString --output text) || {
            echo "❌ Failed to retrieve literature config from AWS Secrets Manager"
            exit 1
          }
          
          # Mask the entire configs to hide internal hostnames
          echo "::add-mask::$CONFIG"
          echo "::add-mask::$LITERATURE_CONFIG"
          
          # Extract values from shared config
          SSM_INSTANCE_ID=$(echo "$CONFIG" | jq -r .ssm_instance_id)
          
          # Extract values from literature-specific config
          DB_HOST=$(echo "$LITERATURE_CONFIG" | jq -r .db_host)
          DB_PORT=$(echo "$LITERATURE_CONFIG" | jq -r .db_port)
          DB_NAME=$(echo "$LITERATURE_CONFIG" | jq -r .db_name)
          DB_USER=$(echo "$LITERATURE_CONFIG" | jq -r .db_user)
          
          # Validate all required fields are present
          for var in SSM_INSTANCE_ID DB_HOST DB_PORT DB_NAME DB_USER; do
            if [ -z "${!var}" ] || [ "${!var}" = "null" ]; then
              echo "❌ CONFIG missing or empty: $var"
              exit 1
            fi
          done
          
          # Mask internal infrastructure details
          echo "::add-mask::$DB_HOST"
          echo "::add-mask::$DB_PORT"
          echo "::add-mask::$SSM_INSTANCE_ID"
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_NAME"
          
          # Output validated values
          echo "ssm_instance_id=$SSM_INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "db_host=$DB_HOST" >> $GITHUB_OUTPUT
          echo "db_port=$DB_PORT" >> $GITHUB_OUTPUT
          echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT
          echo "db_user=$DB_USER" >> $GITHUB_OUTPUT
          
          # Note: Password will be fetched right before Claude step to minimize exposure

      - name: Cache SSM Plugin
        id: cache-ssm-plugin
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        uses: actions/cache@v4
        with:
          path: /tmp/session-manager-plugin.deb
          key: ${{ runner.os }}-ssm-plugin

      - name: Install SSM Plugin and PostgreSQL client
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        run: |
          set -euo pipefail
          
          if [ "${{ steps.cache-ssm-plugin.outputs.cache-hit }}" != 'true' ]; then
            echo "Downloading SSM plugin..."
            curl -fsSL -o /tmp/session-manager-plugin.deb \
              https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb
          fi
          
          echo "Installing SSM plugin and PostgreSQL client..."
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          sudo dpkg -i /tmp/session-manager-plugin.deb || {
            echo "Initial dpkg install failed, fixing dependencies..."
            sudo apt-get install -f -y
            sudo dpkg -i /tmp/session-manager-plugin.deb
          }
          
          # Verify installations
          session-manager-plugin --version
          pg_isready --version

      - name: Start database tunnel
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        id: tunnel
        run: |
          set -euo pipefail
          
          # Configurable timeout values
          TUNNEL_TIMEOUT="30m"  # Match OIDC session duration
          WAIT_ITERATIONS=60
          SLEEP_INTERVAL=2
          
          # Dynamic port allocation to avoid collisions - do this right before tunnel start
          LOCAL_PORT=$(comm -23 <(seq 5500 6500) <(ss -lnt | awk 'NR>1{print $4}' | awk -F: '{print $NF}' | sort -n) | shuf -n1)
          
          # Final check that port is still available
          if nc -z localhost $LOCAL_PORT 2>/dev/null; then
            echo "❌ Port $LOCAL_PORT became unavailable, retrying..."
            LOCAL_PORT=$(comm -23 <(seq 5500 6500) <(ss -lnt | awk 'NR>1{print $4}' | awk -F: '{print $NF}' | sort -n) | shuf -n1)
          fi
          
          echo "Using local port: $LOCAL_PORT"
          echo "local_port=$LOCAL_PORT" >> $GITHUB_OUTPUT
          
          # Start SSM session in background with timeout
          timeout --foreground $TUNNEL_TIMEOUT \
            aws ssm start-session \
            --target ${{ steps.db-config.outputs.ssm_instance_id }} \
            --document-name AWS-StartPortForwardingSessionToRemoteHost \
            --parameters '{"host":["${{ steps.db-config.outputs.db_host }}"],"portNumber":["${{ steps.db-config.outputs.db_port }}"],"localPortNumber":["'$LOCAL_PORT'"]}'  &
          
          SSM_PID=$!
          echo "pid=$SSM_PID" >> $GITHUB_OUTPUT
          
          # Give SSM a moment to start
          sleep 1
          
          # Validate SSM process started successfully
          if [ -z "$SSM_PID" ] || ! ps -p $SSM_PID >/dev/null 2>&1; then
            echo "❌ SSM session failed to start"
            echo "Check that the SSM instance ID and parameters are correct"
            exit 1
          fi
          
          # Set up trap for cleanup on cancellation (after we have SSM_PID)
          cleanup() {
            echo "Received cancel signal – cleaning up SSM tunnel"
            # Validate PID before attempting to kill
            if [ -n "$SSM_PID" ] && ps -p $SSM_PID >/dev/null 2>&1; then
              # Kill SSM process and its children
              kill -TERM -- -$SSM_PID 2>/dev/null || true
            fi
          }
          trap 'cleanup' INT TERM
          
          # Wait for tunnel with retry loop and process validation
          echo "Waiting for SSM tunnel..."
          for i in $(seq 1 $WAIT_ITERATIONS); do
            # Check if SSM process is still running
            if ! ps -p $SSM_PID >/dev/null 2>&1; then
              echo "❌ SSM process crashed (PID: $SSM_PID)"
              exit 1
            fi
            
            # Check if database is ready through tunnel using pg_isready
            if pg_isready -h localhost -p $LOCAL_PORT -t 2 >/dev/null 2>&1; then
              echo "✅ Database tunnel fully established on port $LOCAL_PORT after $(($i * $SLEEP_INTERVAL)) seconds"
              # Keep trap active - do not remove
              break
            else
              # Only show retry message if SSM process is still running
              if ps -p $SSM_PID >/dev/null 2>&1; then
                echo "Waiting for database through tunnel..."
              fi
            fi
            
            if [ $i -eq $WAIT_ITERATIONS ]; then
              echo "❌ Timeout waiting for SSM tunnel after $(($WAIT_ITERATIONS * $SLEEP_INTERVAL)) seconds"
              echo "Killing SSM process..."
              kill $SSM_PID || true
              exit 1
            fi
            
            # Use longer sleep interval for more stable connection
            sleep $SLEEP_INTERVAL
          done

      - name: Generate review configuration
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        id: review-config
        run: |
          set -euo pipefail
          
          # Always use minimal MCP configuration (no zen tools)
          MCP_CONFIG=$(jq -n '{
            "mcpServers": {}
          }')
          ALLOWED_TOOLS="Bash,Edit,Read,Write,Glob,Grep,LS"
          
          # Set outputs
          printf 'mcp_config<<EOF\n%s\nEOF\n' "$MCP_CONFIG" >> $GITHUB_OUTPUT
          echo "allowed_tools=$ALLOWED_TOOLS" >> $GITHUB_OUTPUT

      - name: Get database password
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        id: db-password
        uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.6
        with:
          secret-ids: |
            DB_CREDS,literature-db-readonly
          parse-json-secrets: true
        # Note: This action automatically parses JSON secrets and creates environment variables
        # DB_CREDS_PASSWORD env var is only available for subsequent steps in this job
      
      - name: Verify password and prepare for Claude
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        id: prepare-claude
        run: |
          set -euo pipefail
          
          # Verify password was retrieved
          if [ -z "${DB_CREDS:-}" ]; then
            echo "❌ Failed to retrieve database password from Secrets Manager"
            exit 1
          fi
          
          # Mask the password
          echo "::add-mask::$DB_CREDS"
          
          # Pass password to next step via GITHUB_ENV
          echo "DB_PASSWORD=$DB_CREDS" >> $GITHUB_ENV
          
          # Quick database connectivity check
          echo "Testing database connection..."
          echo "Connection details: localhost:${{ steps.tunnel.outputs.local_port }} user=${{ steps.db-config.outputs.db_user }} db=${{ steps.db-config.outputs.db_name }}"
          
          # Try connection with visible error output for debugging
          if PGPASSWORD="$DB_CREDS" psql -h localhost -p ${{ steps.tunnel.outputs.local_port }} -U "${{ steps.db-config.outputs.db_user }}" -d "${{ steps.db-config.outputs.db_name }}" -c "SELECT current_database(), version();" 2>&1; then
            echo "✅ Database connection verified"
          else
            echo "❌ Database connection test failed with exit code: $?"
            
            # Additional diagnostic information
            echo "Checking if tunnel is still active..."
            if nc -zv localhost ${{ steps.tunnel.outputs.local_port }} 2>&1; then
              echo "✅ Tunnel port is responding"
            else
              echo "❌ Tunnel port is not responding"
            fi
            
            # Check if the SSM process is still running
            if ps -p ${{ steps.tunnel.outputs.pid }} >/dev/null 2>&1; then
              echo "✅ SSM process is still running (PID: ${{ steps.tunnel.outputs.pid }})"
            else
              echo "❌ SSM process has died"
            fi
            
            exit 1
          fi
      
      - name: Run Claude Code Review
        if: steps.check-trigger.outputs.triggered == 'true' && steps.pr-details.outputs.skip_non_main != 'true' && steps.strategy.outputs.skip_review == 'false'
        uses: anthropics/claude-code-action@beta
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}
          PYTHONUNBUFFERED: "1"
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-sonnet-4-20250514
          max_turns: 80
          custom_instructions: |
            You are reviewing a PULL REQUEST DIFF for an Alliance of Genome Resources Literature Service FastAPI/Python application.
            
            REVIEW APPROACH:
            1. FIRST: Use `git diff` to understand what lines changed in this PR
            2. SECOND: For changed functions/methods, you MAY read the surrounding context to understand:
               - How the changed code integrates with existing functionality
               - Whether the changes might break existing behavior
               - If the changes are consistent with the codebase patterns
            3. FOCUS: Your review comments must be about the CHANGES, not pre-existing code
            
            WHEN TO READ BROADER CONTEXT:
            - When a method signature changes (check callers)
            - When a method implementation changes (understand the full method)
            - When new code is added (verify it fits with surrounding code)
            - When imports/dependencies change (check usage)
            - When SQLAlchemy models or queries change (verify database mappings)
            
            REVIEW SCOPE - Only flag issues that are:
            1. INTRODUCED or WORSENED by this PR's changes
            2. Critical bugs that could cause data corruption or system failures
            3. Database performance issues created by these changes
            4. SQLAlchemy-specific issues introduced by these changes
            5. Breaking changes to existing functionality
            
            IMPORTANT: Many PRs are small fixes. If the changes look correct and don't introduce new issues, 
            simply acknowledge the fix and say "Changes look good".
            
            Keep reviews concise and actionable. Reference specific line numbers from the diff.

            PR Size: ${{ steps.pr-details.outputs.pr_size }} lines changed
            Files Changed: ${{ steps.pr-details.outputs.files_changed }}
            Review Strategy: ${{ steps.strategy.outputs.reason }}
            
            DATABASE ACCESS: You have direct PostgreSQL read-only access via psql command:
            - Host: localhost
            - Port: ${{ steps.tunnel.outputs.local_port }}
            - Database: ${{ steps.db-config.outputs.db_name }}
            - User: ${{ steps.db-config.outputs.db_user }}
            - Password is set in PGPASSWORD environment variable
            
            Use psql for database queries (read-only):
            psql -h localhost -p ${{ steps.tunnel.outputs.local_port }} -U ${{ steps.db-config.outputs.db_user }} -d ${{ steps.db-config.outputs.db_name }} -c "YOUR SQL HERE"
            
            Examples:
            - Check table structure: -c "\d table_name"
            - List tables: -c "\dt"
            - Query data: -c "SELECT * FROM table_name LIMIT 10"
            
            If you detect database-related changes in this PR (Alembic migrations, SQLAlchemy models, 
            database queries), validate model definitions against actual schema, check for missing 
            foreign key constraints, analyze query performance implications, and ensure proper 
            indexing for reference lookups and author searches.
            
            IMPORTANT: Always end your review comments with developer usage instructions:
            
            ---
            💡 **Claude Code Capabilities**
            
            I can help with additional commands! Try these:
            - **Answer Questions**: `@claude explain how the literature curation system works`
            - **Implement Code Changes**: `@claude add validation for publication references`
            - **Debug Issues**: `@claude help debug why the citation parser is failing`
            - **Analyze Architecture**: `@claude review the literature data model changes`
            - **Perform another review**: `@claude Please review my changes`
            
            Just comment `@claude` followed by your request!
          direct_prompt: |
            START by running: git diff origin/main...HEAD --name-status
            Then examine the changed lines using: git diff origin/main...HEAD
            
            REVIEW STRATEGY:
            1. Analyze the diff to understand what changed
            2. For complex changes, read the surrounding context of modified functions/methods
            3. Check if changes might break existing functionality
            4. Verify changes follow project patterns
            5. For database changes, check SQLAlchemy models and query implications
            
            CONTEXTUAL READING GUIDELINES:
            - Read modified methods in full to understand the changes
            - Check callers if method signatures change
            - Verify new code integrates properly with existing code
            - For SQLAlchemy models, verify database mappings match schema
            - DO NOT review or comment on unmodified code
            
            Focus your review on:
            1. Critical bugs INTRODUCED by these changes
            2. Breaking changes to existing functionality
            3. Database performance issues CAUSED by these changes
            4. Integration issues with existing code
            
            If the changes look correct and don't introduce new issues, say so clearly.
            Example good responses for clean PRs:
            - "Changes look good, no blocking issues."
            - "The changes are correct and safe to merge."
            
            Keep feedback concise, actionable, and directly tied to the diff.
            
            IMPORTANT: Always end your review with the developer capabilities section from your custom instructions.
          mcp_config: ${{ steps.review-config.outputs.mcp_config }}
          allowed_tools: ${{ steps.review-config.outputs.allowed_tools }}
          claude_env: |
            REPOSITORY: ${{ github.repository }}
            ORGANIZATION: ${{ github.repository_owner }}
            PR_SIZE: ${{ steps.pr-details.outputs.pr_size }}

      - name: Cleanup
        if: always() && steps.tunnel.outputs.pid != '' && steps.pr-details.outputs.skip_non_main != 'true'
        run: |
          set -euo pipefail
          
          echo "Cleaning up SSM tunnel (PID: ${{ steps.tunnel.outputs.pid }})"
          
          # Validate PID before attempting to kill
          if [ -n "${{ steps.tunnel.outputs.pid }}" ] && ps -p ${{ steps.tunnel.outputs.pid }} >/dev/null 2>&1; then
            # Kill the entire process group (same as trap handler)
            kill -TERM -- -${{ steps.tunnel.outputs.pid }} 2>/dev/null || true
          fi
          
          # Also terminate any hanging SSM sessions
          SESSIONS=$(aws ssm describe-sessions --state Active --filters "key=Target,value=${{ steps.db-config.outputs.ssm_instance_id }}" --query "Sessions[?DocumentName=='AWS-StartPortForwardingSessionToRemoteHost'].SessionId" --output text)
          for session in $SESSIONS; do
            echo "Terminating SSM session: $session"
            aws ssm terminate-session --session-id $session || true
          done