{
  "name": "postgres-source-extract-fields",
  "config": {
    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
    "tasks.max": "1",
    "slot.name": "debezium_extract_fields",
    "publication.name": "debezium_extract_fields",
    "database.hostname": "${PSQL_HOST}",
    "database.port": "${PSQL_PORT}",
    "database.user": "${PSQL_USERNAME}",
    "database.password": "${PSQL_PASSWORD}",
    "database.dbname" : "${PSQL_DATABASE}",
    "database.server.name": "abc",
    "table.include.list": "public.citation,public.reference,public.resource,public.mod_corpus_association,public.topic_entity_tag_source,public.mod_referencetype,public.mod,public.referencetype,public.copyright_license",
    "database.history.kafka.bootstrap.servers": "dbz_kafka:9092",
    "decimal.handling.mode" : "string",
    "publication.autocreate.mode": "filtered",
    "heartbeat.interval.ms": "10000",
    "heartbeat.topics.prefix": "__debezium-heartbeat.extract_fields",
    "transforms": "extractKeyCitation,extractValueCitation,extractKeyReference,extractValueReference,extractKeyResource,extractValueResource,extractKeyModCorpusAssociation,extractValueModCorpusAssociation,extractKeyTopicEntityTagSource,extractValueTopicEntityTagSource,extractKeyModReferencetype,extractValueModReferencetype,extractKeyMod,extractValueMod,extractKeyReferencetype,extractValueReferencetype,extractKeyCopyrightLicense,extractValueCopyrightLicense",
    "transforms.extractKeyCitation.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyCitation.field": "citation_id",
    "transforms.extractKeyCitation.predicate": "isCitation",
    "transforms.extractValueCitation.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueCitation.field": "after",
    "transforms.extractValueCitation.predicate": "isCitation",
    "transforms.extractKeyReference.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyReference.field": "reference_id",
    "transforms.extractKeyReference.predicate": "isReference",
    "transforms.extractValueReference.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueReference.field": "after",
    "transforms.extractValueReference.predicate": "isReference",
    "transforms.extractKeyResource.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyResource.field": "resource_id",
    "transforms.extractKeyResource.predicate": "isResource",
    "transforms.extractValueResource.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueResource.field": "after",
    "transforms.extractValueResource.predicate": "isResource",
    "transforms.extractKeyModCorpusAssociation.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyModCorpusAssociation.field": "mod_corpus_association_id",
    "transforms.extractKeyModCorpusAssociation.predicate": "isModCorpusAssociation",
    "transforms.extractValueModCorpusAssociation.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueModCorpusAssociation.field": "after",
    "transforms.extractValueModCorpusAssociation.predicate": "isModCorpusAssociation",
    "transforms.extractKeyTopicEntityTagSource.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyTopicEntityTagSource.field": "topic_entity_tag_source_id",
    "transforms.extractKeyTopicEntityTagSource.predicate": "isTopicEntityTagSource",
    "transforms.extractValueTopicEntityTagSource.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueTopicEntityTagSource.field": "after",
    "transforms.extractValueTopicEntityTagSource.predicate": "isTopicEntityTagSource",
    "transforms.extractKeyModReferencetype.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyModReferencetype.field": "mod_referencetype_id",
    "transforms.extractKeyModReferencetype.predicate": "isModReferencetype",
    "transforms.extractValueModReferencetype.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueModReferencetype.field": "after",
    "transforms.extractValueModReferencetype.predicate": "isModReferencetype",
    "transforms.extractKeyMod.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyMod.field": "mod_id",
    "transforms.extractKeyMod.predicate": "isMod",
    "transforms.extractValueMod.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueMod.field": "after",
    "transforms.extractValueMod.predicate": "isMod",
    "transforms.extractKeyReferencetype.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyReferencetype.field": "referencetype_id",
    "transforms.extractKeyReferencetype.predicate": "isReferencetype",
    "transforms.extractValueReferencetype.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueReferencetype.field": "after",
    "transforms.extractValueReferencetype.predicate": "isReferencetype",
    "transforms.extractKeyCopyrightLicense.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
    "transforms.extractKeyCopyrightLicense.field": "copyright_license_id",
    "transforms.extractKeyCopyrightLicense.predicate": "isCopyrightLicense",
    "transforms.extractValueCopyrightLicense.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractValueCopyrightLicense.field": "after",
    "transforms.extractValueCopyrightLicense.predicate": "isCopyrightLicense",
    "predicates": "isCitation,isReference,isResource,isModCorpusAssociation,isTopicEntityTagSource,isModReferencetype,isMod,isReferencetype,isCopyrightLicense",
    "predicates.isCitation.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isCitation.pattern": "abc\\.public\\.citation",
    "predicates.isReference.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isReference.pattern": "abc\\.public\\.reference",
    "predicates.isResource.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isResource.pattern": "abc\\.public\\.resource",
    "predicates.isModCorpusAssociation.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isModCorpusAssociation.pattern": "abc\\.public\\.mod_corpus_association",
    "predicates.isTopicEntityTagSource.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isTopicEntityTagSource.pattern": "abc\\.public\\.topic_entity_tag_source",
    "predicates.isModReferencetype.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isModReferencetype.pattern": "abc\\.public\\.mod_referencetype",
    "predicates.isMod.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isMod.pattern": "abc\\.public\\.mod",
    "predicates.isReferencetype.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isReferencetype.pattern": "abc\\.public\\.referencetype",
    "predicates.isCopyrightLicense.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
    "predicates.isCopyrightLicense.pattern": "abc\\.public\\.copyright_license",
    "plugin.name": "pgoutput",
    "database.tcpKeepAlive": "true",
    "database.tcpUserTimeout": "30000",
    "database.query.timeout.ms": "300000",
    "database.connectTimeout": "30000",
    "database.socketTimeout": "30000",
    "slot.stream.params.status_interval": "10s",
    "poll.interval.ms": "1500",
    "max.queue.size": "32768",
    "max.batch.size": "4096",
    "errors.tolerance": "all",
    "errors.deadletterqueue.topic.name": "debezium.errors.extract_fields",
    "errors.deadletterqueue.topic.replication.factor": "1",
    "errors.deadletterqueue.context.headers.enable": "true",
    "errors.log.enable": "true",
    "errors.log.include.messages": "true"
  }
}
