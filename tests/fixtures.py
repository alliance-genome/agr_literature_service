import shutil

import pytest
from agr_literature_service.api.models import initialize
from agr_literature_service.api.database.base import Base
from agr_literature_service.api.database.config import SQLALCHEMY_DATABASE_URL
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session
from os import environ, path

from agr_literature_service.lit_processing.data_ingest.post_reference_to_db import post_references
from agr_literature_service.lit_processing.tests.mod_populate_load import post_mods


def delete_all_table_content(engine):
    if environ.get('TEST_CLEANUP') == "true":
        print("***** Deleting test data from all tables *****")
        for table in reversed(Base.metadata.sorted_tables):
            if table != "users":
                engine.execute(table.delete())


@pytest.fixture
def db() -> Session:
    print("***** Creating DB session *****")
    engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"options": "-c timezone=utc"})
    initialize()
    delete_all_table_content(engine)
    db = sessionmaker(bind=engine, autoflush=True)()
    yield db
    delete_all_table_content(engine)
    print("***** Closing DB session *****")
    db.close()

@pytest.fixture
def cleanup_tmp_files_when_done():
    """
    Deletes temp files generated by scripts under XML_PATH

    The cleanup is happening when the test importing this fixture exits, not when it is called
    """
    yield None
    if environ.get('TEST_CLEANUP') == "true":
        base_path = environ.get('XML_PATH')
        shutil.rmtree(base_path)


@pytest.fixture
def load_sanitized_references():
    post_mods()
    json_file_path = path.join(path.dirname(path.abspath(__file__)), "lit_processing", "sample_data",
                               "sanitized_references/")
    post_references(json_path=json_file_path)
    yield None
