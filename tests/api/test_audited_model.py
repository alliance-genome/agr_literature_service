# generated by AI
from datetime import datetime, timedelta, timezone

import pytest
from sqlalchemy import Column, Integer, String, inspect
from agr_literature_service.api.database.base import Base
from agr_literature_service.api.models.audited_model import AuditedModel
from agr_literature_service.api.models.user_model import UserModel
from agr_literature_service.api.user import set_global_user_id

from ..fixtures import db  # noqa: F401


class AuditedDummy(Base, AuditedModel):
    __tablename__ = "audited_dummy"

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)


def _utc_now() -> datetime:
    return datetime.utcnow()


def _to_utc(dt: datetime) -> datetime:
    # normalize both aware/naive to aware UTC only for comparisons/printing
    return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)


def _is_recent(dt: datetime, seconds: int = 5) -> bool:
    return abs((_to_utc(_utc_now()) - _to_utc(dt)).total_seconds()) < seconds


def _ensure_user(db, uid: str): # noqa
    if uid is None:
        return
    if not db.query(UserModel).filter_by(id=uid).one_or_none():
        db.add(UserModel(id=uid))
        db.commit()


@pytest.fixture(autouse=True)
def _clear_global_user():
    """Ensure each test starts with no global user set."""
    from agr_literature_service.api import user as user_mod
    prev = user_mod.user_id
    user_mod.user_id = None
    try:
        yield
    finally:
        user_mod.user_id = prev


@pytest.fixture(autouse=True)
def _create_tables(db): # noqa
    """
    Ensure the test table exists for each test function and that required users exist.
    Function-scoped to match the function-scoped `db` fixture.
    """
    engine = db.get_bind()
    insp = inspect(engine)
    if not insp.has_table(AuditedDummy.__tablename__):
        Base.metadata.create_all(bind=engine, tables=[AuditedDummy.__table__])

    # Make sure FK targets exist
    for uid in ("default_user", "OTTO", "MANUAL_CREATOR"):
        _ensure_user(db, uid)

    yield

    # Clean up rows for isolation, but keep the table to avoid DDL churn
    db.query(AuditedDummy).delete()
    db.commit()


def test_insert_autostamps_when_no_global_user(db): # noqa
    """Insert with no fields set -> stamps dates and default user."""
    obj = AuditedDummy(name="alpha")
    db.add(obj)
    db.commit()
    db.refresh(obj)

    assert isinstance(obj.date_created, datetime)
    assert isinstance(obj.date_updated, datetime)
    assert _is_recent(obj.date_created)
    assert _is_recent(obj.date_updated)
    assert obj.created_by == "default_user"
    assert obj.updated_by == "default_user"


def test_insert_respects_explicit_created_fields(db): # noqa
    """Explicit created fields on insert are kept; updated fields auto-stamped."""
    manual_created = _utc_now() - timedelta(days=10)
    _ensure_user(db, "MANUAL_CREATOR")

    obj = AuditedDummy(
        name="bravo",
        date_created=manual_created,
        created_by="MANUAL_CREATOR",
    )
    db.add(obj)
    db.commit()
    db.refresh(obj)

    assert _to_utc(obj.date_created) == _to_utc(manual_created)
    assert obj.created_by == "MANUAL_CREATOR"
    assert isinstance(obj.date_updated, datetime)
    assert obj.date_updated == obj.date_created  # date updated automatically set to date_created value if not provided
    assert obj.updated_by == obj.created_by  # updated_by automatically set to created_by value if not provided


def test_update_overwrites_to_now_and_global_user(db): # noqa
    """
    Current listener behavior on UPDATE:
      - date_updated := now
      - updated_by   := get_default_user_value() (global user or 'default_user')
    """
    obj = AuditedDummy(name="charlie")
    db.add(obj)
    db.commit()
    db.refresh(obj)

    prev_updated = obj.date_updated

    _ensure_user(db, "OTTO")
    set_global_user_id(db, "OTTO")

    obj.name = "charlie-2"
    db.add(obj)
    db.commit()
    db.refresh(obj)

    assert obj.updated_by == "OTTO"
    assert obj.date_updated >= prev_updated
    assert _is_recent(obj.date_updated)


def test_update_uses_default_user_when_global_unset(db): # noqa
    """If global user is unset, updated_by falls back to 'default_user'."""
    obj = AuditedDummy(name="echo")
    db.add(obj)
    db.commit()
    db.refresh(obj)

    obj.name = "echo-2"
    db.add(obj)
    db.commit()
    db.refresh(obj)

    assert obj.updated_by == "default_user"
    assert _is_recent(obj.date_updated)
